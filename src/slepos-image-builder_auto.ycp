/**
 * File:	clients/slepos-image-builder_auto.ycp
 * Package:	Configuration of slepos-image-builder
 * Summary:	Client for autoinstallation
 * Authors:	Michael G. Fritch <mgfritch@novell.com>
 *
 * $Id: slepos-image-builder_auto.ycp,v 1.12 2004/01/28 21:24:07 nashif Exp $
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */

/**
 * @param function to execute
 * @param map/list of slepos-image-builder settings
 * @return map edited settings, Summary or boolean on success depending on called function
 * @example map mm = $[ "FAIL_DELAY" : "77" ];
 * @example map ret = WFM::CallFunction ("slepos-image-builder_auto", [ "Summary", mm ]);
 */

{

textdomain "slepos-image-builder";

y2milestone("----------------------------------------");
y2milestone("SleposImageBuilder auto started");

import "SleposImageBuilder";
include "slepos-image-builder/wizards.ycp";

any ret = nil;
string func = "";
map param = $[];

/* Check arguments */
if(size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
    func = (string)WFM::Args(0);
    if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
	param = (map) WFM::Args(1);
}
y2debug("func=%1", func);
y2debug("param=%1", param);

/* Create a summary*/
if(func == "Summary") {
    ret = select(SleposImageBuilder::Summary(), 0, "");
}
/* Reset configuration */
else if (func == "Reset") {
    SleposImageBuilder::Import($[]);
    ret = $[];
}
/* Change configuration (run AutoSequence) */
else if (func == "Change") {
    ret = SleposImageBuilderAutoSequence();
}
/* Import configuration */
else if (func == "Import") {
    ret = SleposImageBuilder::Import(param);
}
/* Return actual state */
else if (func == "Export") {
    ret = SleposImageBuilder::Export();
}
/* Return needed packages */
else if (func == "Packages") {
    ret = SleposImageBuilder::AutoPackages();
}
/* Read current state */
else if (func == "Read") {
    import "Progress";
    Progress::off();
    ret = SleposImageBuilder::Read();
    Progress::on();
}
/* Write givven settings */
else if (func == "Write") {
    import "Progress";
    Progress::off();
    SleposImageBuilder::write_only = true;
    ret = SleposImageBuilder::Write();
    Progress::on();
}
/* Unknown function */
else {
    y2error("Unknown function: %1", func);
    ret = false;
}

y2debug("ret=%1", ret);
y2milestone("SleposImageBuilder auto finished");
y2milestone("----------------------------------------");

return ret;

/* EOF */
}
