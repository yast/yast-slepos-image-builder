/**
 * File:	include/slepos-image-builder/subdialogs.ycp
 * Package:	Configuration of slepos-image-builder
 * Summary:	Image Builder dialogs definitions
 * Authors:	Michael G. Fritch <mgfritch@novell.com>
 *
 * $Id: dialogs.ycp,v 1.6 2004/02/05 11:29:30 msvec Exp $
 */

{

textdomain "slepos-image-builder";

import "Label";
import "Wizard";
import "SleposImageBuilder";
import "SleposImageBuilderXml";
import "Report";
import "SleposUtils";

include "slepos-image-builder/helps.ycp";
include "slepos-image-builder/complex.ycp";
include "slepos-image-builder/routines.ycp";

/**
 * Returns a detailed dialog for a given heading and body
 * @param body
 * @return term
 */
term DetailedSettingsDialog (string heading, term body) {
	term dialog = `Frame (
		heading,
		`VBox (
			`HStretch(),
			`VSpacing(1),
			body,
			`VSpacing(1),
			`VSpacing(1),
			`HBox (
				`PushButton(`id("ok"), Label::OKButton()),
				`PushButton(`id("cancel"), Label::CancelButton())
			)
		)
	);

	return dialog;
}


/**
 * Returns the buttons that are to display below the Modify Image table
 * @return term
 */
term ManageImageTableWidgets() {
	term button_box =  `HVSquash(`HBox (
		//`opt (`hstretch),
		`HWeight( 1, `PushButton (`id ("duplicate_image"), `opt (`key_F3), _("&Duplicate"))),
		`HWeight( 1, `PushButton (`id ("modify_image"),  `opt (`key_F4), _("&Edit"))),
		`HWeight( 1, `PushButton (`id ("remove_image"), `opt (`key_F5), _("De&lete"))),
//		`HSpacing(2),
		`HWeight( 1, `PushButton (`id ("build_image"), `opt (`key_F7), _("B&uild")))
	));
	return button_box;
}


/**
 * Returns the buttons that are to display below the Build Image table
 * @return term
 */
term BuildImageTableWidgets() {
	term button_box = `HBox (
		`opt (`hstretch),
		`PushButton (`id ("build_image"), `opt (`key_F3), _("&Build Image"))
	);
	return button_box;
}


/**
 * Returns the buttons that are to display below the Build Image table
 * @return term
 */
term DeltaImageTableWidgets() {
	term contents = `VBox();
	contents = add( contents,
		`Table( `id("table_images2"), `opt (`notify),
			`header(_("Name") + "                       ", _("Version") + "     ", _("Distribution")/*, _("Description")*/),
			[]
		)
	);
	term button_box = `HBox (
		`opt(`hstretch),
		`PushButton(`id("build_image"), `opt(`key_F3), _("Create &Delta"))
	);
	contents = add(contents, button_box);
	return contents;
}


/**
 * Returns dialog with a table summary of the image description trees
 * @param button style ("modify" or "build")
 * @return term
 */
term ImageTableDialog(string button_type) {
	term contents = `VBox ();
	contents = add (contents,
		`Table ( `id ("table_images"), `opt (`notify),
			`header(_("Name") + "                       ", _("Version") + "     ", _("Distribution")/*, _("Description")*/),
			[]
		)
	);

	// add to correct widgets (i.e. buttons) to the bottom of the table.
	if (button_type == "manage") contents = add (contents, ManageImageTableWidgets());
	else if (button_type == "build") contents = add (contents, BuildImageTableWidgets());
	else if (button_type == "delta") contents = add (contents, DeltaImageTableWidgets());

	//contents = Wizard_hw::SpacingAround(contents, 1.5, 1.5, 1.0, 1.0);
	
	return contents;
}


/**
 * Dialog for duplicating an image descr. tree
 * @return dialog result
 */
any DuplicateImageDialog () {

	string image_key = SleposImageBuilder::SettingsMap["ImageKey"]:"";

	string caption = _("Duplicate Image Description Tree");

	term contents = `HVSquash( `Frame(
		caption,
		`VBox (
			`HStretch(),
//			`VSpacing(1),
			`Left(`TextEntry(`id(`name), _("Image n&ame"), SleposImageBuilderXml::GetValueString("/ImageSpecification/@ImageName"))),
			`Left(`TextEntry(`id(`version), _("Image &version"), SleposImageBuilderXml::GetValueString("/ImageSpecification/@ImageVersion"))),
			`Left(`ComboBox(`id(`dist),
				"Image &distribution",
				[
					"NLD",
					"SLES"
				]
			))
//			`VSpacing(2)
		)
	));

	Wizard::SetContentsButtons(caption, contents, HELPS["duplicate_image"]:"",
		Label::BackButton(), Label::NextButton());

	// Make sure the combo box defaults to the appropriate value
	string dist = toupper(tostring(SleposImageBuilderXml::GetValueString("/RPMSpecifications/DistributionSource/@ImageClass")));
	if (dist == nil || dist == "") dist = "NLD"; // NLD is the default distro for NLPOS 9 images
	UI::ChangeWidget(`id(`dist), `Value, dist);

	any ret = nil;
	while(true) {

		ret = UI::UserInput();
	
		/* abort? */
		if(ret == `abort || ret == `cancel || ret == `back) {
			if(ReallyAbort()) break;
			else continue;
		}
		else if(ret == `next) {
			// Query the widget values
			string name = (string)UI::QueryWidget(`id(`name), `Value);
			string version = (string)UI::QueryWidget(`id(`version), `Value);
			string dist = (string)UI::QueryWidget(`id(`dist), `Value);
			if (name == nil || name == "") {
				Report::Error(_("Image name required."));
				continue;
			}
			if ( version == nil || version == "") {
				Report::Error(_("Image version required."));
				continue;
			}

			// make sure the specified version is in the correct format
			if (!regexpmatch(version, "^[0-9]+\\.[0-9]+\\.[0-9]+")) {
				Report::Error(_("A correct image version must contain exactly three\nnumbers with a periods in between each number.\n\nFor example: 2.0.21\n"));
				continue;
			}

			// make sure there is not another image with the same name and version
			string new_image_key = sformat("%1-%2", name, version);
			if (size(SleposImageBuilder::ImagesMap[new_image_key]:$[]) > 0) {
				Report::Error(sformat(_("Another image description tree with the following name and version \nalready exists.\n\n%1\n\nPlease choose another image name or version."), new_image_key));
				continue;
			}


			//FIXME:  Must add error checking for the following comment!
			//IMPORTANT:  You cannot use the word "boot" in any image name other than the cdboot and disknetboot images.


			// duplicate the image using xscr
			if (!SleposImageBuilder::duplicateImageDescrTree(image_key, new_image_key, tolower(dist))) {
				//Report::Error(sformat(_("Failed to duplicate image description tree '%1' to '%2'"), image_key, new_image_key));
				continue;
			}

			// Modify the image settings using queried values
			//FIXME: there should be a better way to do the below values
			SleposImageBuilder::current_image["//ImageSpecification/@ImageName"] = name;
			SleposImageBuilder::current_image["//ImageSpecification/@ImageVersion"] = version;
			SleposImageBuilder::current_image["//RPMSpecifications/DistributionSource/@ImageClass"] = tolower(dist);

			// Create a new image entry in SleposImageBuilder::ImagesMap
			//FIXME: is the following line neccessary???
			SleposImageBuilder::ImagesMap = add(SleposImageBuilder::ImagesMap, new_image_key, SleposImageBuilder::current_image);

			break;
		}
		else {
			y2error("unexpected retcode: %1", ret);
			continue;
		}
	}

	return ret;
}



/**
 * Edit the localization settings for an existing image
 * @return dialog result
 */
any LocaleDialog () {

	string caption = _("Image Localization");

	term contents = `VBox( 
		`HBox(
			`HWeight( 3, `HStretch() ),
			`HWeight( 45, LanguageSelectWidget(SleposImageBuilderXml::GetValueString("//ImageSpecification/@Locale"), SleposImageBuilder::getSupportedLocale()) ),
			`HWeight( 5, `HStretch() ),
			`HWeight( 45, KeyboardSelectWidget(SleposImageBuilderXml::GetValueString("//ImageSpecification/@Keytable")) ),
			`HWeight( 2, `HStretch() )
		),
		`VSpacing()
	);

	Wizard::SetContentsButtons(caption, contents, HELPS["locale"]:"",
		Label::BackButton(), Label::NextButton());

	any ret = nil;
	while(true) {
		ret = UI::UserInput();

		/* abort? */
		if(ret == `abort || ret == `cancel) {
			if(ReallyAbort()) break;
			else continue;
		}
		else if(ret == `back) {
			break;
		}
		else if(ret == `next) {
			// Query the widget values
			string language = (string)UI::QueryWidget( `id( `language ), `CurrentItem );
			string keytable = (string)UI::QueryWidget( `id( `keytable ), `CurrentItem );
			if (language == nil || language == "") {
				Report::Error(_("Language required."));
				continue;
			}
			if (keytable == nil || keytable == "") {
				Report::Error(_("Keytable required."));
				continue;
			}

			y2debug("QueryWidget language: %1", language);
			y2debug("QueryWidget keytable: %1", keytable);

			// Modify the image settings using queried values
			SleposImageBuilderXml::SetAttribute("//ImageSpecification", "Locale", language);
			SleposImageBuilderXml::SetAttribute("//ImageSpecification", "Keytable", getKeymap(keytable));
			break;
		}
		else if (ret == `language || ret == `keytable) {
			continue;
		}
		else {
			y2error("unexpected retcode: %1", ret);
			continue;
		}
	}

    return ret;
}



/**
 * Edit the timezone settings for an existing image
 * @return dialog result
 */
any TimezoneDialog () {
	import "Timezone";

	// build up timezone selection box
	term timezonesel = `ReplacePoint (`id(`tzsel), `SelectionBox (`id (`timezone), `opt(`notify), _("Time &Zone")));
	term region = `SelectionBox (`id(`region),`opt(`notify,`immediate), _("Re&gion"),Timezone::Region());

	string caption = _("Timezone settings");

	term contents = `VBox(
		`HBox(
			`HWeight( 3, `HStretch() ),
			`HWeight( 40, region ),
			`HWeight( 5, `HStretch() ),
			`HWeight( 50, timezonesel ),
			`HWeight( 2, `HStretch() )
		),
		`VSpacing()
	);

	Wizard::SetContentsButtons(caption, contents, HELPS["timezone"]:"",
		Label::BackButton(), Label::NextButton());

	// Initially set the current timezone to establish a consistent state.
	string timezone = SleposImageBuilderXml::GetValueString("//ImageSpecification/@Timezone");
	if (timezone == nil || timezone == "") timezone = "US/Mountain"; // set a default so something is selected in the table
	integer sel = 0;
	sel = Timezone::Set (timezone, false);
	UI::ChangeWidget (`id(`region), `CurrentItem, sel);
	UI::ReplaceWidget (`id(`tzsel),
		`SelectionBox ( `id(`timezone), `opt(`notify),
		// label text
		_("Time &Zone"), Timezone::Selection (sel))
	);
	UI::ChangeWidget (`id(`timezone), `CurrentItem, timezone);
	UI::SetFocus (`id(`region));


	any ret = nil;
	while(true) {
		ret = UI::UserInput();

		/* abort? */
		if(ret == `abort || ret == `cancel) {
			if(ReallyAbort()) break;
			else continue;
		}
		else if(ret == `back) {
			break;
		}
		else if(ret == `next) {
			// Query the widget values
			//string timezone = (string)UI::QueryWidget(`id(`timezone), `Value);
			timezone = (string)UI::QueryWidget( `id(`timezone ), `CurrentItem );
			if (timezone == nil || timezone == "") {
				Report::Error(_("Timezone required."));
				continue;
			}

			y2milestone("timezone=%1", timezone);
			
			SleposImageBuilderXml::SetAttribute("//ImageSpecification", "Timezone", timezone);

			break;
		}
		else if(ret == `timezone) {
			continue;
		}
		if (ret == `region) {
			integer num = (integer)UI::QueryWidget( `id(`region), `CurrentItem);
			y2milestone ("selected region %1", num);
			UI::ReplaceWidget (`id(`tzsel),
				`SelectionBox ( `id(`timezone), `opt(`notify),
				// label text
				_("Time &Zone"), Timezone::Selection (num))
			);
			if (num == sel) {
				UI::ChangeWidget (`id(`timezone), `CurrentItem, timezone);
			}
		}
		else {
			y2error("unexpected retcode: %1", ret);
			continue;
		}
	}

	return ret;
}



/**
 * Edit the set of add-on images for an existing image
 * @return dialog result
 */
any AddonDialog () {

	string caption = _("Image Add-ons");
	
	// create a list of supported addons to display in the multiselection box
	list<string> supportedAddons = sort(SleposImageBuilder::getSupportedAddons()); // get a list of currently supported image add-ons.
	list<string> selectedAddons = SleposImageBuilderXml::GetValueList("//IncludeSpecificationList/IncludeSpecification/@URI"); // get a list of selected add-ons for the current image
	y2milestone("selectedAddons: %1", selectedAddons);
	list<term> addons_term = [];
	foreach(string addon_filename, supportedAddons, {
		if (addon_filename != nil && addon_filename != "") {
			// make sure each addon displays the correct state ( selected || ! selected )
			if (selectedAddons != nil && size(selectedAddons) > 0 && contains(selectedAddons, addon_filename))
					addons_term = add(addons_term, `item(`id(addon_filename), SleposImageBuilder::getAddonName(addon_filename), true));
			else 
				addons_term = add(addons_term, `item(`id(addon_filename), SleposImageBuilder::getAddonName(addon_filename), false));
		}
	});

	term contents = `MultiSelectionBox(`id(`addon_boxes), `opt(`notify), "&Select Image Add-ons", addons_term);

	contents = `VBox (
			contents,
			`VSpacing(1),
			`Left(`Label(_("Description"))),
			`RichText(`id(`details), ""),
			`VSpacing(1)
	);

	contents = Wizard_hw::SpacingAround(contents, 1.5, 1.5, 1.0, 1.0);

	Wizard::SetContentsButtons(caption, contents, HELPS["addon"]:"",
		Label::BackButton(), Label::NextButton());

//	if (supportedAddons != nil && size(supportedAddons) > 0)
//		UI::ChangeWidget(`id(`addon_boxes), `CurrentItem, supportedAddons[0]:nil);

	any ret = nil;
	while(true) {
		ret = UI::UserInput();

		/* abort? */
		if(ret == `abort || ret == `cancel || ret == `back) {
			if(ReallyAbort()) break;
			else continue;
		}
		else if(ret == `next) {
			// figure out which addons are selected
			list<string> new_addons_list = [];
			list selected_items = (list) UI::QueryWidget( `id(`addon_boxes), `SelectedItems );
			foreach(any addon_filename, selected_items, {
				if (is(addon_filename, string) && addon_filename != nil && addon_filename != "")
					new_addons_list = add(new_addons_list, (string)addon_filename);
			});

			// create a list of addons to remove
			list<string> del_addons_list = [];
			foreach(string addon_filename, supportedAddons, {
				if (addon_filename != nil && addon_filename != "") {
					if (!contains(new_addons_list, addon_filename)) {
						del_addons_list = add(del_addons_list, addon_filename);
					}
				}
			});

			y2debug("List of all addons: %1", supportedAddons);
			y2milestone("add addons list: %1", new_addons_list);
			y2milestone("remove addons list: %1", del_addons_list);

			SleposImageBuilderXml::HandleIncludeSpecificationList(new_addons_list, del_addons_list);

			break;
		}
		else if(ret == `addon_boxes) {
			string current_item = (string) UI::QueryWidget(`id(`addon_boxes), `CurrentItem);
			if(current_item != nil && current_item != "") {
				UI::ChangeWidget(`id(`details), `Value, SleposImageBuilder::getAddonDescription(current_item));
			}
		}
		else {
			y2error("unexpected retcode: %1", ret);
			continue;
		}
		
		
	}

    return ret;
}



/**
 * Edit the set of drivers for an existing image
 * @return dialog result
 */
any DriverDialog () {

	string caption = _("Image Drivers");
	
	// create a list of supported drivers to display in the multiselection box
	list<string> supportedDrivers = sort(SleposImageBuilder::getSupportedDrivers()); // get a list of currently supported image add-ons.
	list<string> selectedDrivers = SleposImageBuilderXml::GetValueList("//IncludeSpecificationList/IncludeSpecification/@URI"); // get a list of selected add-ons for the current image
	y2milestone("selectedDrivers: %1", selectedDrivers);
	list<term> drivers_term = [];
	foreach(string driver_filename, supportedDrivers, {
		if (driver_filename != nil && driver_filename != "") {
			// make sure each driver displays the correct state ( selected || ! selected )
			if (selectedDrivers != nil && size(selectedDrivers) > 0 && contains(selectedDrivers, driver_filename))
					drivers_term = add(drivers_term, `item(`id(driver_filename), SleposImageBuilder::getAddonName(driver_filename), true));
			else 
				drivers_term = add(drivers_term, `item(`id(driver_filename), SleposImageBuilder::getAddonName(driver_filename), false));
		}
	});

	term contents = `MultiSelectionBox(`id(`driver_boxes), `opt(`notify), "&Select Image Add-ons", drivers_term);

	contents = `VBox (
			contents,
			`VSpacing(1),
			`Left(`Label(_("Description"))),
			`RichText(`id(`details), ""),
			`VSpacing(1)
	);

	contents = Wizard_hw::SpacingAround(contents, 1.5, 1.5, 1.0, 1.0);

	Wizard::SetContentsButtons(caption, contents, HELPS["drivers"]:"",
		Label::BackButton(), Label::NextButton());

	any ret = nil;
	while(true) {
		ret = UI::UserInput();

		/* abort? */
		if(ret == `abort || ret == `cancel || ret == `back) {
			if(ReallyAbort()) break;
			else continue;
		}
		else if(ret == `next) {
			// figure out which drivers are selected
			list<string> new_drivers_list = [];
			list selected_items = (list) UI::QueryWidget( `id(`driver_boxes), `SelectedItems );
			foreach(any driver_filename, selected_items, {
				if (is(driver_filename, string) && driver_filename != nil && driver_filename != "")
					new_drivers_list = add(new_drivers_list, (string)driver_filename);
			});

			// create a list of drivers to remove
			list<string> del_drivers_list = [];
			foreach(string driver_filename, supportedDrivers, {
				if (driver_filename != nil && driver_filename != "") {
					if (!contains(new_drivers_list, driver_filename)) {
						del_drivers_list = add(del_drivers_list, driver_filename);
					}
				}
			});

			y2debug("List of all drivers: %1", supportedDrivers);
			y2milestone("add drivers list: %1", new_drivers_list);
			y2milestone("remove drivers list: %1", del_drivers_list);

			SleposImageBuilderXml::HandleIncludeSpecificationList(new_drivers_list, del_drivers_list);

			break;
		}
		else if(ret == `driver_boxes) {
			string current_item = (string) UI::QueryWidget(`id(`driver_boxes), `CurrentItem);
			if(current_item != nil && current_item != "") {
				UI::ChangeWidget(`id(`details), `Value, SleposImageBuilder::getAddonDescription(current_item));
			}
		}
		else {
			y2error("unexpected retcode: %1", ret);
			continue;
		}
		
		
	}

    return ret;
}


/**
 * Edit an build options for an existing image
 * @return dialog result
 */
any ImageTypeOptionsDialog () {

	string caption = _("Image Options");

	term contents_body = `VBox (
			`ComboBox(`id(`imagetype), `opt(`hstretch),
				_("Image &Type"),
				[
					"diskless",
					"diskfull",
//					"CD-install",
//					"Live-CD",
//					"USB",
//					"Flash",
//					"ZLM"
				]
			),
			`ComboBox(`id(`filesystem), `opt(`hstretch),
				_("Image &Filesystem"),
				[
					"ext2",
					"ext3",
//					"reiser", // FIXME: is this a supported filesystem type???`
//					"cramfs"  // FIXME: is this a supported filesystem type???`
				]
			)
		);
	

	contents_body = Wizard_hw::SpacingAround(contents_body, 1.5, 1.5, 1.0, 1.0);

	term contents = `HVSquash(`Frame(_("Image options"), contents_body));

	Wizard::SetContentsButtons(caption, contents, HELPS["image_options"]:"",
		Label::BackButton(), Label::NextButton());

	// Make sure the combo box defaults to the appropriate value
	string imagetype = SleposImageBuilderXml::GetValueString("//ImageSpecification/@ImageType");
	if (imagetype == nil || imagetype == "") imagetype = "diskless";
	UI::ChangeWidget(`id(`imagetype), `Value, imagetype);
	string filesystem = SleposImageBuilderXml::GetValueString("//ImageSpecification/@Type");
	if (filesystem == nil || filesystem == "") filesystem = "ext2";
	UI::ChangeWidget(`id(`filesystem), `Value, filesystem);

	any ret = nil;
	while(true) {
		ret = UI::UserInput();

		/* abort? */
		if(ret == `abort || ret == `cancel || ret == `back) {
			if(ReallyAbort()) break;
			else continue;
		}
		else if(ret == `next) {
			imagetype = (string)UI::QueryWidget(`id(`imagetype), `Value);
			filesystem = (string)UI::QueryWidget(`id(`filesystem), `Value);

			if (imagetype == nil || imagetype == "") {
				Report::Error(_("A valid image type must be selected"));
				continue;
			}
			if (filesystem == nil || filesystem == "") {
				Report::Error(_("A valid image filesystem must be selected"));
				continue;
			}

			SleposImageBuilderXml::SetAttribute("//ImageSpecification", "ImageType", imagetype);
			SleposImageBuilderXml::SetAttribute("//ImageSpecification", "Type", filesystem);
			break;
		}
		else {
			y2error("unexpected retcode: %1", ret);
			continue;
		}
	}

    return ret;
}


/**
 * Edit an build options for an existing image
 * @return dialog result
 */
any BuildOptionsDialog () {

	string caption = _("Image Build Options");

	term contents_body = `VBox (
			`Left(`CheckBox(`id(`compress), _("&Compress Image (gzip)"), SleposImageBuilder::SettingsMap["CompressDiskImage"]:false)),
			`Left(`CheckBox(`id(`keep_rpm), _("&Keep RPM Database"), SleposImageBuilder::SettingsMap["KeepRPMDatabase"]:false)),
			`Left(`CheckBox(`id(`verify_rpm), _("&Verify Installed RPMs"), SleposImageBuilder::SettingsMap["VerifyRPM"]:false)),
			`Left(`CheckBox(`id(`verify_rpm_sig), _("Verify RPM Package &Signature"), SleposImageBuilder::SettingsMap["VerifyRPMSig"]:false)),
			`Left(`CheckBox(`id(`CDBoot), _("Create a C&DBoot Image"), false)),
			`VSpacing(1),
			`HBox(
				`TextEntry(`id(`dest), _("Image destination &directory"), SleposImageBuilder::SettingsMap["ImageDestDir"]:"/opt/SLES/POS/image/"),
				`VBox(
					`Label(" "), // NOTE: adds space to the top of the browse button so that it will line up correctly with the text entry
					`PushButton(`id(`browse), Label::BrowseButton())
				)
			)
		);
	

	contents_body = Wizard_hw::SpacingAround(contents_body, 1.5, 1.5, 1.0, 1.0);

	term contents = `HVSquash(`Frame(_("Build options"), contents_body));

	Wizard::SetContentsButtons(caption, contents, HELPS["build_options"]:"",
		Label::BackButton(), Label::NextButton());

	any ret = nil;
	while(true) {
		ret = UI::UserInput();

		/* abort? */
		if(ret == `abort || ret == `cancel || ret == `back) {
			if(ReallyAbort()) break;
			else continue;
		}
		else if(ret == `next) {
			boolean compress = (boolean)UI::QueryWidget(`id(`compress), `Value);
			boolean keep_rpm = (boolean)UI::QueryWidget(`id(`keep_rpm), `Value);
			boolean verify_rpm = (boolean)UI::QueryWidget(`id(`verify_rpm), `Value);
			boolean verify_rpm_sig = (boolean)UI::QueryWidget(`id(`verify_rpm_sig), `Value);
			string dest = (string)UI::QueryWidget(`id(`dest), `Value);
			boolean CDBoot = (boolean)UI::QueryWidget(`id(`CDBoot), `Value);

			if (dest == nil || dest == "") {
				Popup::Error(_("Image destination directory reqiured."));
				continue;
			}

			SleposImageBuilder::SettingsMap["CompressDiskImage"] = compress;
			SleposImageBuilder::SettingsMap["KeepRPMDatabase"] = keep_rpm;
			SleposImageBuilder::SettingsMap["VerifyRPM"] = verify_rpm;
			SleposImageBuilder::SettingsMap["VerifyRPMSig"] = verify_rpm_sig;
			SleposImageBuilder::SettingsMap["ImageDestDir"] = dest;
			SleposImageBuilder::SettingsMap["CDBoot"] = CDBoot;
			break;
		}
		else if (ret == `browse) {
			string filename = (string)UI::AskForExistingDirectory((string)UI::QueryWidget(`id(`dest), `Value), _("Select a directory."));
			if (filename != nil) UI::ChangeWidget(`id(`dest), `Value, filename);
		}
		else {
			y2error("unexpected retcode: %1", ret);
			continue;
		}
	}

    return ret;
}


/**
 * Select packages from a copied disto using the PackageManager
 * NOTE: Assumes that the distros should be copied using POSCDTool!
 * @return symbol
 */
define symbol PackageSelectorDialog() ``{

	Popup::ShowFeedback(_("Reading package database..."), _("Please wait..."));

	Pkg::SaveState(); // Save the current package selections

	// Disable the current package sources.
	list<integer> old_source_ids = Pkg::SourceGetCurrent(true);
	Pkg::SourceFinishAll(); // Disable all current inst sources.
	
	// set NLPOS to have source ids
	list<string> distSourceStr = [
		"/opt/SLES/POS/dist/NLD9/FCS/CD1",
                "/opt/SLES/POS/dist/NLD9/FCS/CD2",
                "/opt/SLES/POS/dist/NLD9/FCS/CD3",
                "/opt/SLES/POS/dist/NLPOS9/FCS/CD4"
	];
	list<integer> new_source_ids = [];
	foreach (string new_dist_source, distSourceStr, {
		y2milestone("************************************************************");
		y2milestone("************************************************************");
		y2milestone("************************************************************");
		y2milestone("Adding inst source: %1", new_dist_source);
		y2milestone("************************************************************");
		y2milestone("************************************************************");
		y2milestone("************************************************************");
		new_source_ids = add (new_source_ids, Pkg::SourceCreate(new_dist_source, "")); // FIXME: must read in the list of sources using the XML files.
	});
	y2milestone("************************************************************");
	y2milestone("************************************************************");
	y2milestone("************************************************************");
	y2milestone("new_source_ids=%1", new_source_ids);
	y2milestone("************************************************************");
	y2milestone("************************************************************");
	y2milestone("************************************************************");

//	Pkg::TargetFinish (); // FIXME: is this needed?
	Pkg::SourceStartManager(false);
//	Pkg::ActivateSelections(); // FIXME: is this needed?

	list<string> SelectedRPMList = SleposImageBuilderXml::GetValueList("/ImageSpecification/RPMSpecifications/RPMIncludeList/RPMSet/RPMList/RPM/@Name");

	foreach(string package, SelectedRPMList, {
		Pkg::PkgInstall(package);
	});

	Popup::ClearFeedback();

	// call the PackageManager
	any ret = (symbol)WFM::CallFunction( "inst_packages", [ true, true ] );
	if ( ret == `accept ) ret = `next;
	else if (ret == `abort || ret == `cancel || ret == `back) return ret;

	//Pkg::ActivateSelections(); // FIXME: is this needed?
	list<string> new_packages_list = (list<string>)sort(Pkg::GetPackages(`selected, true));
	y2milestone("New rpm packages: %1 ( %2 )", new_packages_list, size(new_packages_list));


// FIXME: there should be a way to get the list of taboo packages???
//	list<string> taboopacs = (list<string>)sort(Pkg::GetTaboo());???





	// figure out which packages to remove from the XML file
	list<string> remove_packages_list = SelectedRPMList;
	foreach(string new_package, new_packages_list, {
		remove_packages_list = filter(string tmpPackage, remove_packages_list, { return (tmpPackage != new_package); });
	});

	y2milestone("Originally selected packages: %1", SelectedRPMList);
	y2milestone("Packages to add: %1", new_packages_list);
	y2milestone("Packages to remove: %1", remove_packages_list);

	// Update the changes in the global XML doc data structure...
	SleposImageBuilderXml::HandleRPMSpecificationsDistro(new_packages_list, remove_packages_list);







/*
	list<list<integer>> PkgMediaSizes(); // return the sizes of the packages (installed or uninstalled???)
	list<list<integer>> PkgMediaCount(); // return the # of packages to be installed
	integer Pkg::PkgSize(string package); // get (installed) size of a package
	*/
/*	y2milestone("************************************************");
	y2milestone("************************************************");
	y2milestone("************************************************");

	y2milestone("PkgMediaNames(): %1", Pkg::PkgMediaNames());
	y2milestone("PkgMediaSizes(): %1", Pkg::PkgMediaSizes());
//	y2milestone("PkgMediaCount(): %1", Pkg::PkgMediaCount());

	y2milestone("************************************************");
	y2milestone("************************************************");
	y2milestone("************************************************");
*/




	// remove the NLPOS source ids
	foreach(integer int_id, new_source_ids, {
		Pkg::SourceDelete(int_id);
	});

	// re-enable the current package sources.
	foreach(integer int_id, old_source_ids, {
		Pkg::SourceSetEnabled (int_id, true);
	});

	Pkg::RestoreState(false); // Restore the old package selections

	return (symbol)ret;
}


/**
 * Select packages from an explicit user defined location.
 * NOTE: Used to allow access to 3rd party software in images descr trees.
 * @return symbol
 */
symbol ExplicitPackageDialog() {

	string caption = _("3rd Party Software");

	// listing all known explict rpms for the overview table
	list <term> table_items = [];
	list<string> explicitRPMList = SleposImageBuilderXml::GetValueList("/ImageSpecification/RPMSpecifications/RPMIncludeList/RPMSet/ExplicitPath/@URI");
	list<string> table_items_str = explicitRPMList; // make a copy for future reference... we don't want to corrupt the original!
	foreach(string explicitRPM, explicitRPMList, {
		if (explicitRPM != nil && explicitRPM != "")
			table_items = add(table_items, `item( `id(explicitRPM), explicitRPM));
	});

	// build the overview table
	term contents = `VBox ();
	contents = add (contents,
		`Table ( `id ("table_rpms_explicit"),
			`header(_("Explicit RPM Path") + "                       "),
			table_items
		)
	);

	// build the buttons to go below the overview table
	term button_box =  `HVSquash(`HBox (
		//`opt (`hstretch),
		`HWeight( 1, `PushButton (`id ("add_rpm"), `opt (`key_F3), _("&Add"))),
		`HWeight( 1, `PushButton (`id ("modify_rpm"),  `opt (`key_F4), _("&Edit"))),
		`HWeight( 1, `PushButton (`id ("remove_rpm"), `opt (`key_F5), _("De&lete")))
	));

	// add to correct widgets (i.e. buttons) to the bottom of the table.
	contents = add (contents, button_box);
	
	//contents = Wizard_hw::SpacingAround(contents, 1.5, 1.5, 1.0, 1.0);

	Wizard::SetContentsButtons(caption, contents, HELPS["rpm_explicit"]:"",
		Label::BackButton(), Label::NextButton());

	any ret = nil;
	while(true) {
		
		// redraw the overview table
		table_items = [];
		table_items_str = toset(table_items_str);
		foreach(string explicitRPM, table_items_str, {
			if (explicitRPM != nil && explicitRPM != "")
				table_items = add(table_items, `item( `id(explicitRPM), explicitRPM));
		});
		UI::ChangeWidget ( `id("table_rpms_explicit"), `Items, table_items);

		ret = UI::UserInput();
		string current_item = (string) UI::QueryWidget(`id ("table_rpms_explicit"), `CurrentItem); // what item is currently selected in the table?

		/* abort? */
		if(ret == `abort || ret == `cancel || ret == `back) {
			if(ReallyAbort()) break;
			else continue;
		}
		else if(ret == `next) {
			//Query the list of packages in the overview table
			list<string> new_packages_list = table_items_str;

			// figure out which packages to remove from the XML file
			list<string> remove_packages_list = explicitRPMList;
			foreach(string new_package, new_packages_list, {
				remove_packages_list = filter(string tmpPackage, remove_packages_list, { return (tmpPackage != new_package); });
			});
		
			y2milestone("Originally selected packages: %1", explicitRPMList);
			y2milestone("Packages to add: %1", new_packages_list);
			y2milestone("Packages to remove: %1", remove_packages_list);
		
			// Update the changes in the global XML doc data structure...
			SleposImageBuilderXml::HandleRPMSpecificationsExplicit(new_packages_list, remove_packages_list);
			break;
		}
		else if (ret == "add_rpm") {
			string filename = (string)UI::AskForExistingFile("/", "*.rpm *.RPM ", _("Select a RPM package."));
			if (filename != nil && filename != "") {
				table_items_str = add(table_items_str, filename);
			}
			continue;
		}
		else if (ret == "modify_rpm") {
			if (current_item == nil || current_item == "") {
				Report::Error(_("At least on item in the table must be selected"));
				continue;
			}
			string filename = (string)UI::AskForExistingFile(current_item, "*.rpm *.RPM ", _("Select a RPM package."));
			if (filename != nil && filename != "") {
				table_items_str = filter(string str, table_items_str, { return (str != current_item); });
				table_items_str = add(table_items_str, filename);
			}
			continue;
		}
		else if (ret == "remove_rpm") {
			if (current_item == nil || current_item == "") {
				Report::Error(_("At least on item in the table must be selected"));
				continue;
			}
			if ( Popup::YesNo(_("Are you sure you want to remove the selected RPM package?")) ) {
				table_items_str = filter(string str, table_items_str, { return (str != current_item); });
			}
			continue;
		}
		else {
			y2error("unexpected retcode: %1", ret);
			continue;
		}
	}

	return (symbol) ret;
}


/**
 * Manage Image Summary dialog
 * @return dialog result
 */
any SummaryDialog() {
	
	// FIXME: add the name of the image into the caption...
	string caption = sformat(_("%1-%2 Configuration Summary"), 
				SleposImageBuilderXml::GetValueString("/ImageSpecification/@ImageName"),
				SleposImageBuilderXml::GetValueString("/ImageSpecification/@ImageVersion")
			);

	list summary = SleposImageBuilder::Summary();
	string configured = summary[0]:"";

	/* change menu */
	// FIXME: must add the rest of the selectable items in the summary
	list itemsList = [];
	itemsList = add(itemsList, `item(`id(`addon), _("Image Add-ons")));
	itemsList = add(itemsList, `item(`id(`driver), _("Image Drivers")));
	itemsList = add(itemsList, `item(`id(`image_locale), _("Locale")));
	itemsList = add(itemsList, `item(`id(`users), _("Users/Groups")));
	itemsList = add(itemsList, `item(`id(`options), _("Image Options")));
	itemsList = add(itemsList, `item(`id(`rpm_dist), _("Additional Software")));
	itemsList = add(itemsList, `item(`id(`rpm_explicit), _("3rd Party Software")));

	term menu_box = `HBox (
		`HStretch (),
		`ReplacePoint(`id(`rep_menu),
			`MenuButton(`id(`menu_dummy), _("&Change..."),
				itemsList
			)
		),
		`HStretch ()
	);

	term contents = `VBox(
		`Left(`Label(_("Click any headline to make changes or use the \"Change...\" menu below."))),
		`HBox (
			`RichText( `id(`proposal), configured)
		),
		`VSpacing(0.1),
		menu_box,
		`VSpacing(0.2)
	);

	Wizard::SetContentsButtons(caption, contents, HELPS["summary"]:"",
		Label::BackButton(), _("&Save"));

	UI::ChangeWidget(`id(`menu_dummy), `Enabled, false );
	// Set keyboard focus to the [Accept] or [Next] button
	UI::SetFocus(UI::WidgetExists(`id(`accept)) ? `id(`accept) : `id(`next));
	UI::ChangeWidget(`id(`menu_dummy), `Enabled, true);


	any ret = nil;
	while(true) {

		ret = UI::UserInput();
		
		/* abort? */
		if(ret == `abort || ret == `cancel || ret == `back) {
		if(ReallyAbort()) break;
		else continue;
		}
		else if(ret == `next) {
			if (!SleposImageBuilder::proposal_valid) {
				Report::Error(_("There are items in the summary that do not contain correct values.\nPlease fix these items before continuing.\n"));
				continue;
			}
			
			// Write the settings out to the XML file
			Popup::ShowFeedback(_("Saving Image Description Tree Settings..."), _("Please wait..."));
			if (!SleposImageBuilderXml::Write()) Report::Error(_("An error occured writing the modified\nimage description tree settings."));
			sleep(500);
			Popup::ClearFeedback();
			break;
		}
		else if (ret == `image_locale) {
			break;
		}
		else if (ret == `users) {
			break;
		}
		else if (ret == `addon) {
			break;
		}
		else if (ret == `driver) {
			break;
		}
		else if (ret == `options) {
			break;
		}
		else if (ret == `rpm_dist) {
			break;
		}
		else if (ret == `rpm_explicit) {
			break;
		}
		else if (is (ret, string)) {
			if (issubstring((string) ret, "image_locale")) ret = `image_locale;
			else if (issubstring((string) ret, "users")) ret = `users;
			else if (issubstring((string) ret, "addon")) ret = `addon;
			else if (issubstring((string) ret, "driver")) ret = `driver;
			else if (issubstring((string) ret, "options")) ret = `options;
			else if (issubstring((string) ret, "rpm_dist")) ret = `rpm_dist;
			else if (issubstring((string) ret, "rpm_explicit")) ret = `rpm_explicit;
			break;
		}
		else {
			y2error("unexpected retcode: %1", ret);
			continue;
		}
	}

	return ret;
}


/**
 * Progress dialog
 * Displays a progress bar and output of a given set of commands running as a background process
 * @param string dialog title caption
 * @param list<string> commands to execute
 * @return dialog result
 */
any ProgressDialog (string caption, list<string> cmdlist) {

	term contents = `HBox(
		`HSpacing(5),
		`VBox(
			`VSpacing(1),
			`Frame(`id(`frame), "", `HBox( `HSpacing(2),`VBox(
				`VSpacing(0.1),
				`LogView(`id(`log), sformat(_("%1 &Output"), caption), 10, 0 ),
				`VSpacing(0.4),
				`Frame(sformat(_("%1 &Progress"), caption),`ProgressBar(`id(`vol),"", 100, 0)),
				`VSpacing(0.1),
				`HBox (
					`opt (`hstretch),
					`PushButton (`id (`build), `opt (`key_F3), _("&Start")),
					`PushButton (`id (`stop), `opt (`key_F3), _("Sto&p"))
				)
			),
			`HSpacing(2)))
		),
		`HSpacing(5)
	);

	Wizard::SetContentsButtons(caption, contents, HELPS["progress"]:"",
		Label::BackButton(), Label::FinishButton());
	
	//Wizard::HideBackButton(); // back button does not make sense on this dialog.
	Wizard::HideAbortButton(); // abort button does not make sense on this dialog.
	
	any ret = `build; // start building the image immediatly w/o user input!
	while(true) {
		/* abort? */
		if(ret == `abort || ret == `cancel) {
			if(ReallyAbort()) break;
			else continue;
		}
		else if(ret == `back) {
			break;
		}
		else if(ret == `next) {
			break;
		}
		else if(ret == `build) {
			Wizard::DisableNextButton(); //do not allow next button to be pressed until image building is complete
			Wizard::DisableBackButton();
			UI::ChangeWidget(`id(`build),`Enabled, false);
			UI::ChangeWidget(`id(`stop),`Enabled, false);
			
			list script_out = [];
			string s  = "";
			integer i = 0;
			UI::ChangeWidget(`id(`log), `Value, s);
			UI::ChangeWidget(`id(`vol), `Value, i);

			y2milestone("cmdlist: %1", cmdlist);
			Popup::ShowFeedback(sformat(_("Initializing %1 Process..."), caption), _("This might take a while."));

			foreach (string cmd, cmdlist, {
				s = sformat("%1\nExecuting: %2\n", s, cmd); // show the user what we are doing!
				cmd = sformat("nice -n -20 %1", cmd); // set a nice value for this command!
				y2milestone("Executing: %1", cmd);
				SCR::Execute(.background.run_output, cmd);
				while((boolean)SCR::Read(.background.output_open) || (SCR::Read(.background.newlines) > 0)) {
					script_out = (list<string>)SCR::Read(.background.newout);
					foreach(string a, (list<string>)script_out, ``{
						Popup::ClearFeedback();
						UI::ChangeWidget(`id(`stop),`Enabled, true);
						s = s + "\n" + a;
						UI::ChangeWidget(`id(`log), `Value, s);
						y2milestone("%1", a);
						if (i < 98) {
							i = i + 1;
							UI::ChangeWidget(`id(`vol), `Value, i);
						}
					});
	
					ret = UI::PollInput();
					if (ret == `stop) {
						y2milestone("Stopping the background process...");
						boolean killed = (boolean)SCR::Execute(.background.kill);
						y2milestone("killed=%1", killed);
						break;
					}
				}
				Popup::ClearFeedback(); // be sure the feedback message is removed!
	
				if ((integer)SCR::Read(.background.status) != 0) { // command returned with an error
					Popup::Error(sformat(_("%1 Failed!\n\nPlease check the %1 output window for more\ndetails regarding this error condition.\n"),caption));
					break;
				}
				if (ret == `stop) break; // make sure we don't continue on to the next cmd if the stop  button was pressed!
			});
			UI::ChangeWidget(`id(`vol), `Value, 100);

			UI::ChangeWidget(`id(`build),`Enabled, true);
			UI::ChangeWidget(`id(`stop),`Enabled, false);
			Wizard::EnableNextButton(); // image building is complete, enable the next button.
			Wizard::EnableBackButton();
		}
		else {
			y2error("unexpected retcode: %1", ret);
			continue;
		}
		
		ret = UI::UserInput();
	}

	return ret;
}


/**
 * Build an image dialog
 * @return dialog result
 */
any BuildImageDialog () {
	string cmd = "";
	list<string> cmdlist = [];
	string image_key = SleposImageBuilder::SettingsMap["ImageKey"]:"";
	string destdir = SleposImageBuilder::SettingsMap["ImageDestDir"]:"/opt/SLES/POS/image/";
	integer pos = findlastof(destdir, "/");
	if (pos != size(destdir)-1) destdir = destdir + "/"; // string does not contain an slash on the end.
	if (SleposImageBuilder::SettingsMap["CDBoot"]:false) {
		// create a directory to store the built images.
		string iso_date = SleposUtils::GetDateIso8601();
		string image_name_date = sformat("%1-%2", image_key, iso_date); // create a directory for CDBoot images.
		string image_date_dir = sformat("%1%2.cd", destdir, image_name_date);
		cmd = sformat("mkdir -p '%1'", image_date_dir);
		cmdlist = add(cmdlist, cmd);

		// register a temp SCR agent for writing the config.image file.
		string tmpdir = (string)SCR::Read(.target.tmpdir);
		string config_file = sformat("%1/config.image", tmpdir);
//		string agentdef = sformat(".slepos_cdboot_image\n`ag_ini(`SysConfigFile(\"%1\"))\n", config_file);

// register configuration files in SCR using INI-agent
//DO NOT CHANGE THE INDENTATION OF THE FOLLWING LINES!!!
        string agentdef = sformat(".slepos_cdboot_image\n\n`ag_ini(`IniAgent(\"%1\",\n", config_file)
        + "    $[
      \"options\" : [\"line_can_continue\", \"global_values\", \"flat\" ],
      \"comments\": [ \"^[ \\t]*#.*$\", \"#.*\", \"^[ \\t]*$\", \"^[ \\t]*;[^;]+.*$\" ],
      \"params\" : [
        $[
        \"match\" : [ \"^[ \\t]*([^=;]*[^ \\t;=])[ \\t]*=[ \\t]*(.*[^ \\t]|)[ \\t]*$\" , \"%s=%s\"],
      ],
    ],
    ]
  )
)";
//DO NOT CHANGE THE INDENTATION ABOVE THIS LINE!!!


		string tmpscr = sformat("%1/cfg_cdboot_image.scr", tmpdir);
		SCR::Write(.target.string, tmpscr, agentdef);
		y2milestone("REGISTER AGENT: %1", SCR::RegisterAgent(.slepos_cdboot_image, tmpscr));

		// generate the config.image file
		string device = "/dev/ram1";  //FIXME: this must be modified to support hard disks
		// FIXME: the below command must be enhanced to provide all the options that my be written to a config.image file.
		string config_file_str = sformat("%1;%2;%3", device, SleposImageBuilderXml::GetValueString("//ImageSpecification/@ImageName"), SleposImageBuilderXml::GetValueString("//ImageSpecification/@ImageVersion"));
		if (SleposImageBuilder::SettingsMap["CompressDiskImage"]:false) config_file_str = sformat("%1;compressed", config_file_str);
		SCR::Write(.slepos_cdboot_image."IMAGE", config_file_str);
		// Generate the image params for the config.image file
		config_file_str = "";
		if (SleposImageBuilder::SettingsMap["VerifyRPM"]:true) config_file_str = sformat("%1 --verify", config_file_str);
		if (SleposImageBuilder::SettingsMap["KeepRPMDatabase"]:false) config_file_str = sformat("%1 --keep-rpm", config_file_str);
		if (SleposImageBuilder::SettingsMap["CompressDiskImage"]:false) config_file_str = sformat("%1 --gzip", config_file_str);
		if (SleposImageBuilder::SettingsMap["VerifyRPMSig"]:false) config_file_str = sformat("%1 --nostrict", config_file_str);
		SCR::Write(.slepos_cdboot_image."PARAMS", config_file_str);

		// flush the SCR agent cache
		SCR::Write(.slepos_cdboot_image, "force");

		// generate the CDBoot image
		cmd = sformat("/usr/bin/xscr --prepare --image '%1' --build --feature boot_cd:config='%2' --destdir '%3'", SleposImageBuilder::getRecentCDBootTree(), tmpdir, image_date_dir);
		cmdlist = add(cmdlist, cmd);

		// build the iso
		cmd = sformat("/usr/bin/xscr --create-iso '%1.iso' --destdir '%2'", image_name_date, destdir);
		cmdlist = add(cmdlist, cmd);
	}
	else {
		//FIXME: The below xscr command is not complete, must add all the build options.
		// For example: xscr --prepare --image myImage-1.1.1 --nostrict --build --destdir myImages --verify
		cmd = sformat("/usr/bin/xscr --prepare --image '%1' --build --destdir '%2'", image_key, destdir);
		if (SleposImageBuilder::SettingsMap["VerifyRPM"]:true) cmd = sformat("%1 --verify", cmd);
		if (SleposImageBuilder::SettingsMap["KeepRPMDatabase"]:false) cmd = sformat("%1 --keep-rpm", cmd);
		if (SleposImageBuilder::SettingsMap["CompressDiskImage"]:false) cmd = sformat("%1 --gzip", cmd);
		if (SleposImageBuilder::SettingsMap["VerifyRPMSig"]:false) cmd = sformat("%1 --nostrict", cmd);
		cmdlist = add(cmdlist, cmd);
	}

	y2milestone("Building image %1", image_key);
	return ProgressDialog(_("Build Image"), cmdlist);
}


/**
 * Build delta dialog
 * @return dialog result
 */
any DeltaImageDialog (string first_key, string second_key) {
	//FIXME: must add a correct value the --destdir option when the widgets are available for this value
	string filename = SleposImageBuilder::SettingsMap["ImageDestDir"]:"/opt/SLES/POS/image/delta.tar";
	//FIXME: The below xscr command is not complete, must add all the build options.
	// For example: xscr --prepare --image myImage-1.1.1 --nostrict --build --destdir myImages --verify
	string cmd = sformat("/usr/bin/xdscr --image '%1' --with '%2' --dest '%3'", first_key, second_key, filename);
	
	y2milestone("Building delta %1", first_key);
	return ProgressDialog(_("Delta Image"), [cmd]);
}


/* EOF */
}
